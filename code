class Piece:
    def __init__(self, color, symbol):
        self.color = color  # 'white' или 'black'
        self.symbol = symbol  # Символ для отображения на доске
        self.has_moved = False  # Для отслеживания, двигалась ли фигура

    def __str__(self):
        return self.symbol

    def valid_moves(self, board, position):
        # Этот метод должен возвращать список допустимых ходов для фигуры
        return []


class Pawn(Piece):
    def __init__(self, color):
        super().__init__(color, 'P' if color == 'white' else 'p')

    def valid_moves(self, board, position):
        moves = []
        x, y = position
        direction = -1 if self.color == 'white' else 1  # Направление движения пешки

        # Движение вперед
        if board.is_empty((x + direction, y)):
            moves.append((x + direction, y))
            # Первый ход на две клетки
            if (x == 6 and self.color == 'white') or (x == 1 and self.color == 'black'):
                if board.is_empty((x + 2 * direction, y)):
                    moves.append((x + 2 * direction, y))

        # Взятие фигур
        for dy in [-1, 1]:
            target = (x + direction, y + dy)
            if board.is_within_bounds(target) and board.is_opponent(target, self.color):
                moves.append(target)

        # Взятие на проходе
        if (x == 3 and self.color == 'white') or (x == 4 and self.color == 'black'):
            for dy in [-1, 1]:
                target = (x, y + dy)
                if board.is_within_bounds(target):
                    piece = board.get_piece(target)
                    if isinstance(piece, Pawn) and piece.color != self.color and piece == board.last_moved_piece:
                        moves.append((x + direction, y + dy))

        return moves


class Knight(Piece):
    def __init__(self, color):
        super().__init__(color, 'N' if color == 'white' else 'n')

    def valid_moves(self, board, position):
        moves = []
        x, y = position
        # Все возможные ходы коня
        for dx, dy in [(-2, -1), (-1, -2), (1, -2), (2, -1),
                       (2, 1), (1, 2), (-1, 2), (-2, 1)]:
            target = (x + dx, y + dy)
            if board.is_within_bounds(target) and (board.is_empty(target) or board.is_opponent(target, self.color)):
                moves.append(target)
        return moves


class Rook(Piece):
    def __init__(self, color):
        super().__init__(color, 'R' if color == 'white' else 'r')

    def valid_moves(self, board, position):
        moves = []
        x, y = position
        # Движение по горизонтали и вертикали
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            for i in range(1, 8):
                target = (x + dx * i, y + dy * i)
                if not board.is_within_bounds(target):
                    break
                if board.is_empty(target):
                    moves.append(target)
                elif board.is_opponent(target, self.color):
                    moves.append(target)
                    break
                else:
                    break
        return moves


class Bishop(Piece):
    def __init__(self, color):
        super().__init__(color, 'B' if color == 'white' else 'b')

    def valid_moves(self, board, position):
        moves = []
        x, y = position
        # Движение по диагоналям
        for dx, dy in [(-1, -1), (-1, 1), (1, -1), (1, 1)]:
            for i in range(1, 8):
                target = (x + dx * i, y + dy * i)
                if not board.is_within_bounds(target):
                    break
                if board.is_empty(target):
                    moves.append(target)
                elif board.is_opponent(target, self.color):
                    moves.append(target)
                    break
                else:
                    break
        return moves


class Queen(Piece):
    def __init__(self, color):
        super().__init__(color, 'Q' if color == 'white' else 'q')

    def valid_moves(self, board, position):
        # Королева сочетает возможности ладьи и слона
        moves = Rook(self.color).valid_moves(board, position) + Bishop(self.color).valid_moves(board, position)
        return moves


class King(Piece):
    def __init__(self, color):
        super().__init__(color, 'K' if color == 'white' else 'k')

    def valid_moves(self, board, position):
        moves = []
        x, y = position
        # Все возможные ходы короля
        for dx in [-1, 0, 1]:
            for dy in [-1, 0, 1]:
                if dx == 0 and dy == 0:
                    continue
                target = (x + dx, y + dy)
                if board.is_within_bounds(target) and (board.is_empty(target) or board.is_opponent(target, self.color)):
                    moves.append(target)

        # Рокировка
        if not self.has_moved:
            # Короткая рокировка (вправо)
            if board.is_empty((x, y + 1)) and board.is_empty((x, y + 2)):
                rook = board.get_piece((x, y + 3))
                if isinstance(rook, Rook) and not rook.has_moved:
                    if not board.is_in_check(self.color) and not board.is_attacked((x, y + 1), self.color) and not board.is_attacked((x, y + 2), self.color):
                        moves.append((x, y + 2))
            # Длинная рокировка (влево)
            if board.is_empty((x, y - 1)) and board.is_empty((x, y - 2)) and board.is_empty((x, y - 3)):
                rook = board.get_piece((x, y - 4))
                if isinstance(rook, Rook) and not rook.has_moved:
                    if not board.is_in_check(self.color) and not board.is_attacked((x, y - 1), self.color) and not board.is_attacked((x, y - 2), self.color):
                        moves.append((x, y - 2))

        return moves


class Board:
    def __init__(self):
        self.board = [[None for _ in range(8)] for _ in range(8)]
        self.setup_board()
        self.last_moved_piece = None  # Для взятия на проходе

    def setup_board(self):
        # Расстановка фигур на доске
        self.board[0] = [
            Rook('black'), Knight('black'), Bishop('black'), Queen('black'),
            King('black'), Bishop('black'), Knight('black'), Rook('black')
        ]
        self.board[1] = [Pawn('black') for _ in range(8)]
        self.board[6] = [Pawn('white') for _ in range(8)]
        self.board[7] = [
            Rook('white'), Knight('white'), Bishop('white'), Queen('white'),
            King('white'), Bishop('white'), Knight('white'), Rook('white')
        ]

    def display(self):
        # Отображение доски в консоли
        print("  a b c d e f g h")
        for i, row in enumerate(self.board):
            print(f"{8 - i} ", end="")
            for piece in row:
                print(piece if piece else ".", end=" ")
            print(f"{8 - i}")
        print("  a b c d e f g h")

    def is_empty(self, position):
        x, y = position
        return self.board[x][y] is None

    def is_opponent(self, position, color):
        x, y = position
        piece = self.board[x][y]
        return piece is not None and piece.color != color

    def is_within_bounds(self, position):
        x, y = position
        return 0 <= x < 8 and 0 <= y < 8

    def get_piece(self, position):
        x, y = position
        return self.board[x][y]

    def move_piece(self, start, end):
        x1, y1 = start
        x2, y2 = end
        piece = self.board[x1][y1]
        self.board[x2][y2] = piece
        self.board[x1][y1] = None
        piece.has_moved = True
        self.last_moved_piece = piece

        # Рокировка
        if isinstance(piece, King) and abs(y2 - y1) == 2:
            if y2 > y1:  # Короткая рокировка
                rook = self.board[x1][7]
                self.board[x1][5] = rook
                self.board[x1][7] = None
            else:  # Длинная рокировка
                rook = self.board[x1][0]
                self.board[x1][3] = rook
                self.board[x1][0] = None

        # Взятие на проходе
        if isinstance(piece, Pawn) and abs(x2 - x1) == 1 and abs(y2 - y1) == 1 and self.is_empty((x2, y2)):
            self.board[x1][y2] = None

    def find_king(self, color):
        # Находит позицию короля заданного цвета
        for x in range(8):
            for y in range(8):
                piece = self.board[x][y]
                if isinstance(piece, King) and piece.color == color:
                    return (x, y)
        return None

    def is_in_check(self, color):
        # Проверяет, находится ли король под шахом
        king_pos = self.find_king(color)
        if not king_pos:
            return False

        # Проверяем все фигуры противника
        for x in range(8):
            for y in range(8):
                piece = self.board[x][y]
                if piece and piece.color != color:
                    if king_pos in piece.valid_moves(self, (x, y)):
                        return True
        return False

    def is_attacked(self, position, color):
        # Проверяет, атакована ли клетка фигурами противника
        for x in range(8):
            for y in range(8):
                piece = self.board[x][y]
                if piece and piece.color != color:
                    if position in piece.valid_moves(self, (x, y)):
                        return True
        return False

    def is_checkmate(self, color):
        # Проверяет, является ли текущая позиция матом
        if not self.is_in_check(color):
            return False

        # Проверяем, есть ли хотя бы один ход, который убирает шах
        for x in range(8):
            for y in range(8):
                piece = self.board[x][y]
                if piece and piece.color == color:
                    moves = piece.valid_moves(self, (x, y))
                    for move in moves:
                        # Пробуем сделать ход
                        start = (x, y)
                        end = move
                        captured_piece = self.board[end[0]][end[1]]
                        self.move_piece(start, end)
                        if not self.is_in_check(color):
                            # Отменяем ход
                            self.move_piece(end, start)
                            self.board[end[0]][end[1]] = captured_piece
                            return False
                        # Отменяем ход
                        self.move_piece(end, start)
                        self.board[end[0]][end[1]] = captured_piece
        return True


class Game:
    def __init__(self):
        self.board = Board()
        self.current_player = 'white'
        self.move_count = 0
        self.move_history = []

    def play(self):
        while True:
            self.board.display()
            print(f"Ход игрока {self.current_player}")
            if self.board.is_in_check(self.current_player):
                print("ШАХ!")
                if self.board.is_checkmate(self.current_player):
                    print("МАТ! Игра окончена.")
                    break
            move = input("Введите ход (например, e2 e4 или 0-0 для рокировки): ")
            if move == "0-0" or move == "0-0-0":
                if self.castle(move):
                    self.move_count += 1
                    self.current_player = 'black' if self.current_player == 'white' else 'white'
                else:
                    print("Некорректная рокировка. Попробуйте снова.")
            elif self.make_move(move):
                self.move_count += 1
                self.current_player = 'black' if self.current_player == 'white' else 'white'
            else:
                print("Некорректный ход. Попробуйте снова.")

    def make_move(self, move):
        try:
            start, end = move.split()
            start = self.parse_position(start)
            end = self.parse_position(end)
            piece = self.board.get_piece(start)
            if piece and piece.color == self.current_player and end in piece.valid_moves(self.board, start):
                # Сохраняем состояние доски перед ходом
                self.move_history.append((start, end, self.board.board.copy()))
                # Выполняем ход
                self.board.move_piece(start, end)
                return True
            return False
        except:
            return False

    def castle(self, move):
        x = 7 if self.current_player == 'white' else 0
        if move == "0-0":  # Короткая рокировка
            king = self.board.get_piece((x, 4))
            rook = self.board.get_piece((x, 7))
            if isinstance(king, King) and isinstance(rook, Rook) and not king.has_moved and not rook.has_moved:
                if self.board.is_empty((x, 5)) and self.board.is_empty((x, 6)):
                    if not self.board.is_in_check(self.current_player) and not self.board.is_attacked((x, 5), self.current_player) and not self.board.is_attacked((x, 6), self.current_player):
                        self.board.move_piece((x, 4), (x, 6))
                        self.board.move_piece((x, 7), (x, 5))
                        return True
        elif move == "0-0-0":  # Длинная рокировка
            king = self.board.get_piece((x, 4))
            rook = self.board.get_piece((x, 0))
            if isinstance(king, King) and isinstance(rook, Rook) and not king.has_moved and not rook.has_moved:
                if self.board.is_empty((x, 1)) and self.board.is_empty((x, 2)) and self.board.is_empty((x, 3)):
                    if not self.board.is_in_check(self.current_player) and not self.board.is_attacked((x, 2), self.current_player) and not self.board.is_attacked((x, 3), self.current_player):
                        self.board.move_piece((x, 4), (x, 2))
                        self.board.move_piece((x, 0), (x, 3))
                        return True
        return False

    def parse_position(self, pos):
        # Преобразует шахматную нотацию (например, e2) в координаты (6, 4)
        x = 8 - int(pos[1])
        y = ord(pos[0]) - ord('a')
        return (x, y)

    def undo_move(self):
        if self.move_history:
            start, end, board_state = self.move_history.pop()
            self.board.board = board_state
            self.current_player = 'white' if self.current_player == 'black' else 'black'
            self.move_count -= 1
            print(f"Откат хода: {start} -> {end}")

if __name__ == "__main__":
    game = Game()
    game.play()
